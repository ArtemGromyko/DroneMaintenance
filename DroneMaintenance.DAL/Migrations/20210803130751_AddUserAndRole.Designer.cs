// <auto-generated />
using System;
using DroneMaintenance.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DroneMaintenance.DAL.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210803130751_AddUserAndRole")]
    partial class AddUserAndRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc38316e-ea63-473b-84fa-1efa00f3b6ce"),
                            Name = "Tom"
                        },
                        new
                        {
                            Id = new Guid("5bf2d2e5-25c7-47d4-b5a0-13068ce73ab2"),
                            Name = "John"
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85d636bf-637b-4ab3-9d83-894e829df3d6"),
                            ServiceRequestId = new Guid("38a5dc95-3ff1-4c8f-8041-872a65b41d56"),
                            WorkEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkStartDate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("50cb65ad-86a1-4abb-afca-fd4b867d7560"),
                            ServiceRequestId = new Guid("fb35b9ce-61c0-4ce3-a309-e742582845af"),
                            WorkEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkStartDate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.ContractSparePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SparePartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("SparePartId");

                    b.ToTable("ContractSpareParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cb1b5b0-4c66-4893-887f-76a259cf26a6"),
                            ContractId = new Guid("50cb65ad-86a1-4abb-afca-fd4b867d7560"),
                            Quantity = 2,
                            SparePartId = new Guid("193906c8-17a6-4a3c-8eb1-c540cdd6e3fa")
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Drone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Drones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fffa88b-91c5-42a6-8692-1fd8701fb0e4"),
                            Manufacturer = "Xiaomi",
                            Model = "Mi Drone Mini"
                        },
                        new
                        {
                            Id = new Guid("4e02aef0-98d7-430f-bd56-749992687066"),
                            Manufacturer = "DJI",
                            Model = "DJI Mini 2"
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("865ce3fc-de0d-4372-901d-05e0ba2b8d02"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("f6736344-8a7e-43f4-9a1a-facf460b5f3f"),
                            Name = "user"
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.ServiceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("DroneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DroneId");

                    b.ToTable("ServiceRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38a5dc95-3ff1-4c8f-8041-872a65b41d56"),
                            ClientId = new Guid("cc38316e-ea63-473b-84fa-1efa00f3b6ce"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "description",
                            DroneId = new Guid("9fffa88b-91c5-42a6-8692-1fd8701fb0e4"),
                            RequestStatus = 0,
                            ServiceType = 2
                        },
                        new
                        {
                            Id = new Guid("fb35b9ce-61c0-4ce3-a309-e742582845af"),
                            ClientId = new Guid("5bf2d2e5-25c7-47d4-b5a0-13068ce73ab2"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DroneId = new Guid("4e02aef0-98d7-430f-bd56-749992687066"),
                            RequestStatus = 0,
                            ServiceType = 0
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.SparePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("SpareParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("193906c8-17a6-4a3c-8eb1-c540cdd6e3fa"),
                            Name = "sensor",
                            Price = 300m
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Password");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85d2dad8-5ad5-4ad7-ab42-2a883cf0846a"),
                            Email = "sam@email.com",
                            Name = "Sam",
                            Password = "admin",
                            RoleId = new Guid("865ce3fc-de0d-4372-901d-05e0ba2b8d02")
                        },
                        new
                        {
                            Id = new Guid("bf62c2cd-aa17-47ea-b575-f8d769966fb9"),
                            Email = "donald@email.com",
                            Name = "Donald",
                            Password = "user",
                            RoleId = new Guid("f6736344-8a7e-43f4-9a1a-facf460b5f3f")
                        });
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Contract", b =>
                {
                    b.HasOne("DroneMaintenance.DAL.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("Contracts")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.ContractSparePart", b =>
                {
                    b.HasOne("DroneMaintenance.DAL.Entities.Contract", "Contract")
                        .WithMany("ContractSpareParts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DroneMaintenance.DAL.Entities.SparePart", "SparePart")
                        .WithMany("ContractSpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.ServiceRequest", b =>
                {
                    b.HasOne("DroneMaintenance.DAL.Entities.Client", "Client")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DroneMaintenance.DAL.Entities.Drone", "Drone")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Drone");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.User", b =>
                {
                    b.HasOne("DroneMaintenance.DAL.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Client", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Contract", b =>
                {
                    b.Navigation("ContractSpareParts");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Drone", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.ServiceRequest", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DroneMaintenance.DAL.Entities.SparePart", b =>
                {
                    b.Navigation("ContractSpareParts");
                });
#pragma warning restore 612, 618
        }
    }
}
